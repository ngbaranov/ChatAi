import json
from uuid import uuid4
from sqlalchemy import insert, select, func, delete
from app.models.chat_history import ChatHistory
from redis.asyncio.lock import Lock
from sqlalchemy.ext.asyncio import AsyncSession
from app.utils.redis import get_redis_client

redis_client = get_redis_client()


async def save_history_from_redis(user_id: int, db: AsyncSession, limit: int = 200):
    loaded_flag = f"chat:{user_id}:__LOADED_FROM_DB__"
    if await redis_client.exists(loaded_flag):
        print(f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        await redis_client.delete(loaded_flag)
        return
    history_key = f"chat:{user_id}:history"
    lock = Lock(redis_client, name=f"lock:{user_id}", timeout=10)

    async with lock:
        stored = await redis_client.lrange(history_key, 0, -1)

        if not stored:
            print(f"‚ÑπÔ∏è Redis –ø—É—Å—Ç –¥–ª—è user_id={user_id}, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
            return

        session_id = uuid4().hex

        messages = [
            {
                "user_id": user_id,
                "message": msg["content"],
                "role": msg["role"],
                "session_id": session_id
            }
            for msg in map(json.loads, stored)
        ]

        await db.execute(insert(ChatHistory), messages)
        await db.commit()
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î (user_id={user_id})")

        await _cleanup_old_records(db, limit)

        # await redis_client.delete(history_key)
        print(f"üßπ Redis –æ—á–∏—â–µ–Ω: {history_key}")


async def _cleanup_old_records(db: AsyncSession, limit: int = 20):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit –∑–∞–ø–∏—Å–µ–π"""

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    count_query = select(func.count(ChatHistory.id))
    result = await db.execute(count_query)
    total_count = result.scalar()

    if total_count <= limit:
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}, –ª–∏–º–∏—Ç: {limit} ‚Äî –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞")
        return 0

    records_to_delete = total_count - limit
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}, –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: {records_to_delete}")

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    oldest_ids_query = select(ChatHistory.id).order_by(
        ChatHistory.timestamp
    ).limit(records_to_delete)

    oldest_ids_result = await db.execute(oldest_ids_query)
    oldest_ids = [row[0] for row in oldest_ids_result.fetchall()]

    if oldest_ids:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        delete_stmt = delete(ChatHistory).where(
            ChatHistory.id.in_(oldest_ids)
        )
        await db.execute(delete_stmt)
        await db.commit()
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(oldest_ids)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")
        return len(oldest_ids)

    return 0
